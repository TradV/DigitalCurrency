#!/usr/bin/env python
# encoding: utf-8
'''
base.analyze -- shortdesc

base.analyze is a description

It defines classes_and_methods

@author:     johnny

@copyright:  2018 organization_name. All rights reserved.

@license:    license

@contact:    lihongwei.bupt@gmail.com
@deffield    updated: 2018-01-06
'''

import sys
import os
import pandas as pd
import sqlite3
import matplotlib.pyplot as plt

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2018-01-06'
__updated__ = '2018-01-06'

SELECT_SQL='select timestamp,price,amount from trades where exchange=? and pair=? and type=\'sell\''
# [coin1,coin2]
wallet=[[1.0,0.0],[0.0,20000.0]]
def exchange(serial_item):
    wallet0=wallet[0]
    wallet1=wallet[1]
    base_amount=max(wallet0[0],wallet1[0])

    if serial_item[0] - serial_item[1]-(0.002*serial_item[0]+0.002*serial_item[1])> 0 and wallet[0][0]>wallet[1][0]:
        #交易所0大于交易所1的价钱 且交易所0的钱包币种0的数量大于交易所1币种0的数量， 交易所0卖， 交易所1买
        
        # wallet[0]=[wallet0[0]-base_amount,base_amount*serial_item[0]*0.998+wallet0[1]]
        # wallet[1]=[wallet1[0]+base_amount*0.998,wallet1[1]-base_amount*serial_item[1]]
        wallet[0]=[0,wallet0[0]*serial_item[0]*0.998+wallet0[1]]
        wallet[1]=[wallet1[0]+wallet1[1]/serial_item[1]*0.998,0]
        print('exchange0 sell'+str(wallet)+str(serial_item.name))
        return

    if serial_item[1]-serial_item[0] -(0.002*serial_item[0]+0.002*serial_item[1])>0 and wallet[0][0]<wallet[1][0]:
        #交易所1大于交易所0的价钱 且交易所0的钱包币种0的数量小于交易所1币种0的数量，交易所1卖， 交易所0买
        # wallet[0]=[wallet0[0]+base_amount*0.998,wallet0[1]-base_amount*serial_item[0]]
        # wallet[1]=[wallet1[0]-base_amount,wallet1[1]+base_amount*serial_item[1]*0.998]
        wallet[0]=[wallet0[0]+wallet0[1]/serial_item[0]*0.998,0]
        wallet[1]=[0,wallet1[1]+wallet1[0]*serial_item[1]*0.998]
        print('exchange0 buy'+str(wallet)+str(serial_item.name))
        
        return
    # print('no change')
    

def parse(date,pair):
    conn = sqlite3.connect('trades_'+date+'.db')
    freq='3S'
    cursor = conn.cursor()
    # resLst=cursor.execute(SELECT_SQL, (exchange,pair))
    okex_df = pd.read_sql_query(SELECT_SQL, conn,params=('okex',pair),index_col='timestamp')
    # df = pd.read_sql_table('trades',conn,)
    okex_df.index=pd.to_datetime(okex_df.index/1000,unit='s')
    # print(df['price'].resample('1H').ohlc().tail())
    # print(df['amount'].resample('1H').sum().tail())
    # print(df['price'].resample('1H').mean().tail())
    okex_mean_serial= okex_df['price'].resample(freq).mean()
    okex_mean_serial.name='okex'

    bittrex_df=pd.read_sql_query(SELECT_SQL, conn,params=('bittrex',pair),index_col='timestamp')
    bittrex_df.index = pd.to_datetime(bittrex_df.index/1000,unit='s')
    bittrex_mean_serial=bittrex_df['price'].resample(freq).mean()
    bittrex_mean_serial.name='bittrex'

    bitfinex_df=pd.read_sql_query(SELECT_SQL, conn,params=('bitfinex',pair),index_col='timestamp')
    bitfinex_df.index = pd.to_datetime(bitfinex_df.index/1000,unit='s')
    bitfinex_mean_serial=bitfinex_df['price'].resample(freq).mean()
    bitfinex_mean_serial.name='bitfinex'

    poloniex_df=pd.read_sql_query(SELECT_SQL, conn,params=('poloniex',pair),index_col='timestamp')
    poloniex_df.index = pd.to_datetime(poloniex_df.index/1000,unit='s')
    poloniex_mean_serial=poloniex_df['price'].resample(freq).mean()
    poloniex_mean_serial.name='poloniex'

    # mean_df = pd.concat([okex_mean_serial,bittrex_mean_serial,bitfinex_mean_serial,poloniex_mean_serial], axis=1)
    # mean_df.plot()


    # diff_okex_bittrex=abs(okex_mean_serial-poloniex_mean_serial)-(0.001*okex_mean_serial+0.0025*poloniex_mean_serial)
    # diff_okex_bittrex.plot()

    mean_def = pd.concat([okex_mean_serial,poloniex_mean_serial],axis=1)
    mean_def.apply(exchange,axis=1)
    print (wallet)
    # plt.show()
    conn.close()


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2018 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-d", "--date", dest="date", help="select date")
        parser.add_option("-e", "--exchange", dest="exchange", help="select exchange")
        parser.add_option("-p", "--pair", dest="pair", help="select pair")
        # set defaults
        parser.set_defaults(exchange="okex", pair="BTC_USDT",date="2018-01-04")



        # process options
        (opts, args) = parser.parse_args(argv)
        parse(opts.date,opts.pair)

        # if opts.date is None:
        #     print 'parameter can not be none'
        #     return 


        # MAIN BODY #

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    sys.exit(main())